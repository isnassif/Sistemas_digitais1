module rom_toram_zoom #(
    parameter LARGURA = 160,
    parameter ALTURA  = 120,
    parameter FATOR   = 2,
    parameter NEW_LARG   = LARGURA * FATOR,
    parameter NEW_ALTURA = ALTURA  * FATOR
)(
    input wire clk,
    input wire reset,
    

    output reg [18:0] rom_addr,
    input wire [7:0] rom_data,
    output reg [18:0] ram_wraddr,
    output reg [7:0] ram_data,
    output reg ram_wren,
    output reg done
);

    reg [7:0] rom_data_reg;
    // Contadores
    reg [10:0] linha = 0, coluna = 0, di = 0, dj = 0;

    

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            rom_addr <= 0;
            ram_wraddr <= 0;
            ram_data <= 0;
            ram_wren <= 0;
            done <= 0;
            linha <= 0;
            coluna <= 0;
            di <= 0;
            dj <= 0;
            rom_data_reg <= 0;
        end else begin
            ram_wren <= 0;
				rom_data_reg <= rom_data;
				end
				
				if (!done) begin
				   ram_wren <= 1;
					ram_data <= rom_data_reg;
					
					if (di == 0 && dj == 0) begin
					   rom_addr <= linha * LARGURA + coluna;
						ram_wraddr <= (linha * FATOR + di) * NEW_LARG + (coluna * FATOR + dj);
					end
					
					
					 if (dj == FATOR - 1) begin
                    dj <= 0;
                    if (di == FATOR - 1) begin
                        di <= 0;
                        if (coluna == LARGURA - 1) begin
                            coluna <= 0;
                            if (linha == ALTURA - 1) begin
                                linha <= 0;
                                done <= 1;
                                ram_wren <= 0; // Finaliza escrita
                            end else begin
                                linha <= linha + 1;
                                end
                        end else begin
                            coluna <= coluna + 1;
                            end
                    end else begin
                        di <= di + 1;
                        end
                end else begin
                    dj <= dj + 1;
                    end
           end else begin
               ram_wren <= 0; // Mantém wren desativado após conclusão
           end
     end					
endmodule


module main (
    input vga_reset,
    input clk_50MHz,
    output [9:0] next_x,
    output [9:0] next_y,
    output hsyncm,
    output vsyncm,
    output [7:0] redm,
    output [7:0] greenm,
    output [7:0] bluem,
    output blank,
    output sync,
    output clks
);

    // Clock VGA (25 MHz)
    reg clk_vga = 0;
    always @(posedge clk_50MHz) begin
        clk_vga <= ~clk_vga;
    end

    // VGA driver
    vga_driver draw (
        .clock(clk_vga),
        .reset(vga_reset),
		  .color_in(in_image ? c : 8'd0),
        .next_x(next_x),
        .next_y(next_y),
        .hsync(hsyncm),
        .vsync(vsyncm),
        .sync(sync),
        .clk(clks),
        .blank(blank)
    );

    // parâmetros da imagem
    parameter IMG_W = 160;
    parameter IMG_H = 120;

    // offsets para centralizar
    wire [9:0] x_offset = (640 - IMG_W)/2; // 240
    wire [9:0] y_offset = (480 - IMG_H)/2; // 180

    // verifica se está dentro da área da imagem
    wire in_image = (next_x >= x_offset && next_x < x_offset + IMG_W) &&
                    (next_y >= y_offset && next_y < y_offset + IMG_H);

    // endereço da RAM
    reg [18:0] addr_reg;
    always @(posedge clk_vga) begin
        if (in_image)
            addr_reg <= (next_y - y_offset) * IMG_W + (next_x - x_offset);
        else
            addr_reg <= 0; // fora da imagem → fundo preto
    end

    // framebuffer RAM
    wire [7:0] c;
    ram2port framebuffer (
        .clock(clk_vga),
        .data(wr_data),
        .rdaddress(addr_reg),
        .wraddress(wr_addr),
        .wren(wr_en),
        .q(c)
    );

    // ROM (imagem original)
    wire [7:0] rom_pixel;
    wire [18:0] rom_addr;

    memrom rom_image (
        .address(rom_addr),
        .clock(clk_vga),
        .q(rom_pixel)
    );

    // copiador ROM → RAM
    wire [18:0] wr_addr;
    wire [7:0] wr_data;
    wire wr_en;

    rom_toram_zoom zoomnn (
        .clk(clk_vga),
        .reset(vga_reset),
        .rom_addr(rom_addr),
        .rom_data(rom_pixel),
        .ram_wraddr(wr_addr),
        .ram_data(wr_data),
        .ram_wren(wr_en),
        .done()
    );

endmodule
